// ignore_for_file: avoid_print

import 'dart:io';
import 'package:flutter/services.dart';
import 'package:tflite_flutter/tflite_flutter.dart';
import 'package:image/image.dart' as img;

class TFLiteService {
  static Interpreter? _interpreter;
  static List<String>? _labels;

  static const String modelPath = 'assets/models/object_detection_model.tflite';
  static const String labelsPath = 'assets/models/labels.txt';

  // Objets √©cologiques √† d√©tecter
  static const List<String> ecoObjects = [
    'bottle',
    'plastic bottle',
    'glass bottle',
    'can',
    'soda can',
    'plastic bag',
    'paper bag',
    'cardboard',
    'paper',
    'plastic container',
    'cup',
    'food container',
    'aluminum can',
    'tin can',
    'shopping bag',
    'packaging',
    'wrapper',
    'box',
    'carton',
    'container',
  ];

  /// Initialise le mod√®le TensorFlow Lite
  static Future<bool> initialize() async {
    try {
      // Charger le mod√®le
      _interpreter = await Interpreter.fromAsset(modelPath);
      print('‚úÖ Mod√®le TensorFlow Lite charg√© avec succ√®s');

      // Charger les labels
      await _loadLabels();
      print('‚úÖ Labels charg√©s: ${_labels?.length} classes');

      return true;
    } catch (e) {
      print('‚ùå Erreur lors du chargement du mod√®le TensorFlow Lite: $e');

      // Utiliser des labels par d√©faut pour le d√©veloppement
      _labels = _getDefaultEcoLabels();
      print('‚ö†Ô∏è Utilisation des labels par d√©faut pour le d√©veloppement');
      return false;
    }
  }

  /// Charge les labels depuis le fichier
  static Future<void> _loadLabels() async {
    try {
      final labelsData = await rootBundle.loadString(labelsPath);
      _labels = labelsData
          .split('\n')
          .where((label) => label.isNotEmpty)
          .toList();
    } catch (e) {
      print(
        '‚ö†Ô∏è Impossible de charger les labels, utilisation des labels par d√©faut',
      );
      _labels = _getDefaultEcoLabels();
    }
  }

  /// Labels par d√©faut pour objets √©cologiques
  static List<String> _getDefaultEcoLabels() {
    return [
      'bottle',
      'plastic_bottle',
      'glass_bottle',
      'can',
      'plastic_bag',
      'paper',
      'cardboard',
      'plastic_container',
      'cup',
      'food_container',
      'unknown',
    ];
  }

  /// Classification d'image √† partir d'un fichier
  static Future<ClassificationResult> classifyImage(File imageFile) async {
    try {
      // Lire et redimensionner l'image
      final bytes = await imageFile.readAsBytes();
      final image = img.decodeImage(bytes);

      if (image == null) {
        throw Exception('Impossible de d√©coder l\'image');
      }

      // Redimensionner √† 224x224 pour la classification
      final resized = img.copyResize(image, width: 224, height: 224);

      return await _runClassification(resized);
    } catch (e) {
      print('‚ùå Erreur lors de la classification: $e');
      return _getMockResult();
    }
  }

  /// Classification d'image √† partir de bytes
  static Future<ClassificationResult> classifyFromBytes(
    Uint8List imageBytes,
  ) async {
    try {
      final image = img.decodeImage(imageBytes);

      if (image == null) {
        throw Exception('Impossible de d√©coder l\'image');
      }

      final resized = img.copyResize(image, width: 224, height: 224);
      return await _runClassification(resized);
    } catch (e) {
      print('‚ùå Erreur lors de la classification: $e');
      return _getMockResult();
    }
  }

  /// Ex√©cute la classification sur l'image pr√©par√©e
  static Future<ClassificationResult> _runClassification(
    img.Image image,
  ) async {
    if (_interpreter == null) {
      print('‚ö†Ô∏è Mod√®le non initialis√©, simulation de r√©sultat');
      return _getMockResult();
    }

    try {
      // D√©tecter le type de tensor d'entr√©e
      final inputTensor = _interpreter!.getInputTensor(0);
      final isFloat = inputTensor.type == TfLiteType.kTfLiteFloat32;

      print('üîß Type tensor d\'entr√©e: ${inputTensor.type}, Float: $isFloat');

      // Pr√©parer les donn√©es d'entr√©e selon le type attendu
      late final dynamic input;

      if (isFloat) {
        // Mod√®le attend des float32 normalis√©s
        input = List.generate(
          224,
          (y) => List.generate(
            224,
            (x) => List.generate(3, (c) {
              final pixel = image.getPixelSafe(x, y);
              final red = (pixel.r * 255).toInt().clamp(0, 255);
              final green = (pixel.g * 255).toInt().clamp(0, 255);
              final blue = (pixel.b * 255).toInt().clamp(0, 255);

              switch (c) {
                case 0:
                  return red / 255.0;
                case 1:
                  return green / 255.0;
                case 2:
                  return blue / 255.0;
                default:
                  return 0.0;
              }
            }),
          ),
        );
      } else {
        // Mod√®le attend des uint8 (0-255) - convertir en 4D tensor manuellement
        input = List.generate(
          1,
          (_) => List.generate(
            224,
            (y) => List.generate(
              224,
              (x) => List.generate(3, (c) {
                final pixel = image.getPixelSafe(x, y);
                switch (c) {
                  case 0:
                    return (pixel.r * 255).toInt().clamp(0, 255);
                  case 1:
                    return (pixel.g * 255).toInt().clamp(0, 255);
                  case 2:
                    return (pixel.b * 255).toInt().clamp(0, 255);
                  default:
                    return 0;
                }
              }),
            ),
          ),
        );
      }

      // Pr√©parer la sortie
      var output = [List.filled(_labels?.length ?? 10, 0.0)];

      // Ex√©cuter l'inf√©rence
      _interpreter!.run(input, output);

      // Trouver la classe avec la plus haute probabilit√©
      final probabilities = output[0];
      double maxProb = 0.0;
      int maxIndex = 0;

      for (int i = 0; i < probabilities.length; i++) {
        if (probabilities[i] > maxProb) {
          maxProb = probabilities[i];
          maxIndex = i;
        }
      }

      final detectedLabel = _labels?[maxIndex] ?? 'unknown';
      final confidence = maxProb;

      // V√©rifier si c'est un objet √©cologique pertinent
      final isEcoRelevant = _isEcologicallyRelevant(detectedLabel);

      return ClassificationResult(
        label: detectedLabel,
        confidence: confidence,
        isEcologicallyRelevant: isEcoRelevant,
        alternatives: _getAlternativeSuggestions(detectedLabel),
      );
    } catch (e) {
      print('‚ùå Erreur lors de l\'inf√©rence TensorFlow Lite: $e');
      return _getMockResult();
    }
  }

  /// V√©rifie si l'objet d√©tect√© est √©cologiquement pertinent
  static bool _isEcologicallyRelevant(String label) {
    return ecoObjects.any(
      (ecoObj) =>
          label.toLowerCase().contains(ecoObj.toLowerCase()) ||
          ecoObj.toLowerCase().contains(label.toLowerCase()),
    );
  }

  /// Suggestions d'alternatives √©cologiques
  static List<String> _getAlternativeSuggestions(String label) {
    final lowerLabel = label.toLowerCase();

    if (lowerLabel.contains('plastic')) {
      return [
        'Utiliser une gourde r√©utilisable',
        'Privil√©gier les emballages en verre',
        'Choisir des alternatives biod√©gradables',
      ];
    }

    if (lowerLabel.contains('bottle')) {
      return [
        'Recycler dans la bonne fili√®re',
        'R√©utiliser comme contenant',
        'Utiliser une gourde r√©utilisable',
      ];
    }

    if (lowerLabel.contains('bag')) {
      return [
        'Utiliser un sac r√©utilisable',
        'Sacs en toile ou jute',
        '√âviter les sacs plastique',
      ];
    }

    return [
      'Recycler correctement',
      'R√©utiliser si possible',
      'Chercher des alternatives durables',
    ];
  }

  /// R√©sultat mock pour les tests/d√©veloppement
  static ClassificationResult _getMockResult() {
    final mockLabels = ['bottle', 'plastic_bag', 'can', 'paper', 'cardboard'];
    final randomLabel = (mockLabels..shuffle()).first;

    return ClassificationResult(
      label: randomLabel,
      confidence: 0.85 + (0.1 * (DateTime.now().millisecond % 10) / 10),
      isEcologicallyRelevant: true,
      alternatives: _getAlternativeSuggestions(randomLabel),
    );
  }

  /// Lib√®re les ressources
  static void dispose() {
    _interpreter?.close();
    _interpreter = null;
  }
}

/// R√©sultat de classification
class ClassificationResult {
  final String label;
  final double confidence;
  final bool isEcologicallyRelevant;
  final List<String> alternatives;

  ClassificationResult({
    required this.label,
    required this.confidence,
    required this.isEcologicallyRelevant,
    required this.alternatives,
  });

  /// Convertit en JSON pour l'API backend
  Map<String, dynamic> toJson() => {
    'label': label,
    'confidence': confidence,
    'isEcologicallyRelevant': isEcologicallyRelevant,
    'alternatives': alternatives,
  };

  @override
  String toString() {
    return 'ClassificationResult(label: $label, confidence: ${confidence.toStringAsFixed(2)}, eco: $isEcologicallyRelevant)';
  }
}
